@page
@model Progetto.App.Pages.PaymentsModel
@{
    ViewData["Title"] = "Payment";
}

<h2><i class="fas fa-money-check"></i> <strong>@ViewData["Title"]</strong></h2>

<div class="container-fluid">
    <div class="row">
        <partial name="_DashboardPartial" />
        <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-dark text-white">
                    <h3 class="card-title mb-0 text-center">Charging Sessions</h3>
                </div>
                <div class="card-body">
                    <table class="table table-striped table-hover table-bordered">
                        <thead class="thead-light">
                            <tr>
                                <th>Car Plate</th>
                                <th>Parking Slot</th>
                                <th>Start Charging Time</th>
                                <th>End Charging Time</th>
                                <th>Total Cost (€)</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var charge in Model.CurrentCharges)
                            {
                                <tr>
                                    <td>@charge.CarPlate</td>
                                    <td>@charge.ParkingSlotId</td>
                                    <td>@charge.StartChargingTime?.ToString("g")</td>
                                    <td>@charge.EndChargingTime?.ToString("g")</td>
                                    <td>@charge.TotalCost</td>
                                    <td>
                                        @if (charge.ToPay)
                                        {
                                            <button class="btn btn-success" onclick="handlePayment('@charge.Id', @charge.TotalCost.ToString(), true)">Pay Now</button>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <div class="card-body">
                    <table class="table table-striped table-hover table-bordered">
                        <thead class="thead-light">
                            <tr>
                                <th>Car Plate</th>
                                <th>Parking Slot</th>
                                <th>Start Charging Time</th>
                                <th>End Charging Time</th>
                                <th>Total Cost (€)</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var stop in Model.StopCharges)
                            {
                                <tr>
                                    <td>@stop.CarPlate</td>
                                    <td>@stop.ParkingSlotId</td>
                                    <td>@stop.StartStopoverTime?.ToString("g")</td>
                                    <td>@stop.EndStopoverTime?.ToString("g")</td>
                                    <td>@stop.TotalCost</td>
                                    <td>
                                        @if (stop.ToPay)
                                        {
                                            <button class="btn btn-success" onclick="handlePayment('@stop.Id', @stop.TotalCost.ToString(), false)">Pay Now</button>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            <canvas class="my-4 w-100" id="myChart" width="900" height="380"></canvas>
        </main>
    </div>
</div>

@section Scripts {
    <script>
        async function handlePayment(id, totalCost, isCharge) {
            try {
                alert(`Hai pagato €${totalCost.toFixed(2)} con successo.`);

                if (isCharge) {
                    await historicizeCharge(id);
                } else {
                    await historicizeStopover(id);
                }
            } catch (error) {
                console.error("Errore durante il pagamento o la storicizzazione:", error);
                alert("C'è stato un errore durante il pagamento o la storicizzazione.");
            }
        }

        async function historicizeCharge(chargeId) {
            const response = await fetch('/api/currentlycharging/historicizeCharge', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: chargeId
            });

            if (!response.ok) {
                throw new Error('Errore nella storicizzazione della ricarica.');
            }

            console.log('Ricarica storicizzata con successo.');
        }

        async function historicizeStopover(stopoverId) {
            const response = await fetch('/api/currentlycharging/historicizeStopover', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: stopoverId
            });

            if (!response.ok) {
                throw new Error('Errore nella storicizzazione della sosta.');
            }

            console.log('Sosta storicizzata con successo.');
        }
    </script>
}


@*
// TODO: mandare richiesta PUT all'endpoint /api/CurrentlyCharging/historicize

// TODO: PayPal payment implementation
// try {
//     const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
//     const response = await fetch('/Payments?handler=PayNow', {
//         method: 'POST',
//         headers: {
//             'Content-Type': 'application/json',
//             'RequestVerificationToken': token
//         },
//         body: JSON.stringify(carPlate)
//     });
//     const result = await response.json();
//     alert(result.message);
// } catch (error) {
//     console.error('Error:', error);
//     alert('An error occurred during the payment process.');
// } 
*@