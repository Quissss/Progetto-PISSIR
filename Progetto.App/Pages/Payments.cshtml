@page
@model Progetto.App.Pages.PaymentsModel
@{
    ViewData["Title"] = "Payment";
}

<h2><i class="fas fa-money-check"></i> <strong>@ViewData["Title"]</strong></h2>

<div class="container-fluid">
    <div class="row">
        <partial name="_DashboardPartial" />
        <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-dark text-white">
                    <h3 class="card-title mb-0 text-center">Charging Sessions</h3>
                </div>
                <div class="card-body">
                    <table class="table table-striped table-hover table-bordered">
                        <thead class="thead-light">
                            <tr>
                                <th>Car Plate</th>
                                <th>Parking Slot</th>
                                <th>Start Charging Time</th>
                                <th>End Charging Time</th>
                                <th>Total Cost (€)</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="currentChargesTable">
                        </tbody>
                    </table>
                </div>

                <div class="card-body">
                    <table class="table table-striped table-hover table-bordered">
                        <thead class="thead-light">
                            <tr>
                                <th>Car Plate</th>
                                <th>Parking Slot</th>
                                <th>Start Charging Time</th>
                                <th>End Charging Time</th>
                                <th>Total Cost (€)</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="stopChargesTable">
                        </tbody>
                    </table>
                </div>
            </div>
            <canvas class="my-4 w-100" id="myChart" width="900" height="380"></canvas>
        </main>
    </div>
</div>

@section Scripts {
    <script>
        async function handlePayment(id, totalCost, isCharge) {
            try {
                let totalCostNumber = parseFloat(totalCost);

                const orderRequest = {
                    intent: "CAPTURE",
                    purchase_units: [
                        {
                            reference_id: id,
                            amount: {
                                currency_code: "EUR",
                                value: totalCostNumber.toFixed(2),
                                breakdown: {
                                    item_total: {
                                        currency_code: "EUR",
                                        value: totalCostNumber.toFixed(2)
                                    }
                                }
                            }
                        }
                    ]
                };

                // Crea l'ordine PayPal
                const createOrderResponse = await fetch('/api/payment/create-order', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(orderRequest)
                });

                if (!createOrderResponse.ok) {
                    throw new Error('Errore durante la creazione dell\'ordine.');
                }

                const orderResponse = await createOrderResponse.json();
                const orderId = orderResponse.id;

                // Conferma l'ordine PayPal
                const paymentSource = {
                    // Dettagli della fonte di pagamento
                };

                const confirmOrderResponse = await fetch(`/api/payment/confirm-order?orderId=${orderId}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(paymentSource)
                });

                if (!confirmOrderResponse.ok) {
                    throw new Error('Errore durante la conferma dell\'ordine.');
                }

                const capturePaymentResponse = await fetch(`/api/payment/capture-payment?orderId=${orderId}`, {
                    method: 'POST'
                });

                if (!capturePaymentResponse.ok) {
                    throw new Error('Errore durante la cattura del pagamento.');
                }

                alert(`Hai pagato €${totalCostNumber.toFixed(2)} con successo.`);
            } catch (error) {
                console.error("Errore durante il pagamento:", error);
                alert("C'è stato un errore durante il pagamento.");
            }
        }
    </script>
}
