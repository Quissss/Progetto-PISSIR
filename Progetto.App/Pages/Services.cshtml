@page
@model Progetto.App.Pages.ServicesModel
@{
    ViewData["Title"] = "Services";
}
<h2><i class="fa-solid fa-clipboard-check"></i> <strong>@ViewData["Title"]</strong></h2>

<div class="container-fluid">
    <div class="row">
        <partial name="_DashboardPartial" />

        <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
            <div id="carCards"></div>

            <div class="alert alert-info mt-4" id="noCarsMessage">
                Nessuna auto in attesa trovata.
            </div>

            <canvas class="my-4 w-100" id="myChart" width="900" height="380"></canvas>
        </main>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function() {
            loadCars();
            setInterval(loadCars, 1000);
        });

        function loadCars() {
            $.getJSON("/api/Car/my-cars", function (data) {
                const carCardsContainer = $("#carCards");
                const noCarsMessageContainer = $("#noCarsMessage");
                carCardsContainer.empty();

                data = data.filter(car => car.status === 1);
                if (data.length > 0) {
                    noCarsMessageContainer.hide();
                    data.forEach(car => {
                        const cardHtml = `
                            <div class="col-md-6 col-lg-4 mb-4">
                                <div class="card mt-4 shadow-sm">
                                    <div class="card-body">
                                        <h5 class="card-title">
                                            <i class="fa-solid fa-car"></i>
                                            Auto: <span>${car.plate}</span>
                                        </h5>
                                        <h6 class="card-subtitle mb-2 text-muted">
                                            <i class="fa-solid fa-car-side"></i>
                                            Marca: <span>${car.brand}</span>, Modello: <span>${car.model}</span>
                                        </h6>
                                        <p class="card-text">
                                            <span class="badge bg-info text-dark">${car.statusName}</span>
                                        </p>
                                        <div class="d-flex justify-content-around mt-3">
                                            <button class="btn btn-primary" onclick="recharge('${car.plate}', '${car.parkingId}')">
                                                <i class="fa-solid fa-battery-full"></i> Ricarica
                                            </button>
                                            <button class="btn btn-secondary" onclick="park('${car.plate}', '${car.parkingId}')">
                                                <i class="fa-solid fa-parking"></i> Sosta
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>`;
                        carCardsContainer.append(cardHtml);
                    });
                } else {
                    noCarsMessageContainer.show();
                }
            }).fail(function() {
                alert("Errore nel caricamento delle auto.");
            });
        }

        function recharge(plate, parkingId) {
            var rechargePercentage = prompt('Inserisci la percentuale di ricarica desiderata (0-100): ');

            rechargePercentage = parseFloat(rechargePercentage);
            if (isNaN(rechargePercentage) || rechargePercentage < 0 || rechargePercentage > 100) {
                alert('Valore non valido. Inserisci un numero tra 0 e 100.');
                return;
            }

            alert('Ricarica richiesta per la macchina con targa: ' + plate + ' con percentuale di ricarica: ' + rechargePercentage + '%');

            fetch(`/api/CamSimulator/recharge`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ 
                    plate: plate,
                    parkingId: parkingId,
                    chargeLevel: rechargePercentage
                }),
            })
            .then(response => response.json())
            .then(data => {
                console.log('Success:', data);
                alert(`La tua ricarica verrà presa in carico. Posizione in coda: ${data}`);
                loadCars();
            })
            .catch((error) => {
                console.error('Error:', error);
                alert(`Errore durante la richiesta di ricarica dell\'auto con targa: ${plate}`);
            });
        }

        function park(plate, parkingId) {
            alert('Sosta richiesta per macchina con targa: ' + plate);

            fetch(`/api/CamSimulator/park`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    plate: plate,
                    parkingId: parkingId
                }),
            })
            .then(response => response.text())
            .then(data => {
                alert(data);
                loadCars();
            })
            .catch((error) => {
                console.error('Error:', error);
                alert('Errore durante richiesta della sosta dell\'auto con targa: ' + plate);
            });
        }
    </script>
}
